Project: PassLock v1.0 - A simple password manager app!
Author: Nuno Spencer, www.nunospencer.com




*** BUGS ***


**fix ***
- CREATE, SAVE, and GET file AT RELATIVE USER'S directory "Documents" folder.This is necessary so the app can be distributed. Note that will not work for other language versions of Windows (such as portuguese version "Documentos").
    use code: System.getProperty("user.home") + File.separator + "Documents\\my_passwords.txt";
              - i.e, the directory "user"/Documents directory

    Note: 1st) test the change using "GET FILE" button (Main app class). Test with no file in folder.. then create file in folder and test again
          2nd) add and test the change when adding a new password
          3rd) test the change with "FIND"  

- GET FILE: file still opens when user closes file location**

- SEARCH FEATURE: # of same found passwords must be displayed on custom jtextarea(on custom JDialog). Stylize the JTextArea to appear as label

- SEARCH FEATURE: # of same found passwords must be displayed on custom jtextarea(on custom JDialog). Had issue with displaying +1 outputs, i.e. when there was more than
                    1 match, only last match was displayed in textarea. This was solved by using textarea.append(matches + "\n") INSTEAD OF textarea.setText(matches + "\n")
                    (Note: System.Out.LineSeparator was also usable in place of "\n") 

- SEARCH FEATURE: runtime exception when user presses CANCEL while searching password

- SEARCH FEATURE: when using search feature, user account input must be parsed to case insensitive **** fixed using .equalsIgnoreCase()

- SEARCH FEATURE: handle case when user does not write input search but presses OK to search (program will display "No password  found"). It should display
  "Enter password to search or CANCEL" **** fixed by disabling FIND button until input is written to textfield (used DocumentListener() on the textfield)

- RANDOMIZER: dispose() to randomizer window (not main app window) if incorrect input

- RANDOMIZER: handle case when user leaves lenght field blank

- ADD PASSWORD: each new password entry should be written to a new line in the text file. Instead, it's writting all entries in same line.

- RANDOMIZING FEATURE: when using randomizing feature, program crashes if user leaves "lenght of password" field empty - despite the fact that there is a condition that gives alert if so happens - fixed with try catch block to handle empty jtextfield not converting to int

- PASSWORD SEARCHING: algorithm to search for password not working properly

- When adding a new password entry, if use does not enter all 4 fields, program writes black space as input despite showing error message each time a field is left blank

- when randomizing, user had to select either alpha-numeric or alpha-numeric/symbols. Program would crash if user forgot to select radio button. Fixed by having alpha-numeric option preselected when prgram runs

- when running the program for first time, there is not a output file where passwords are stored - if user clicks "Get passwords" button, program would crash. Fixed by forcing user to add password first - will show error message if !(file.exists()) - and tells user to click "add password" button 

-
