/*
 * PASSLOCK (version 1.0) - A Simple Password Manager APP 
 *
 * @author Nuno Spencer
 *
 * www.nunospencer.com
 * www.nunospencer.com/passlockv1
 */

import com.sun.glass.events.KeyEvent;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.Writer;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
//import java.io.Writer;
//import java.io.PrintWriter;
import javax.swing.JOptionPane;

/**
 *
 * @author Peace Infinity
 */
public class ADD_dialogBox_v1 extends javax.swing.JDialog {

    /**
     * Creates new form Add_dialogBox
     * @param parent
     * @param modal
     */
    public ADD_dialogBox_v1(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JTextField();
        usernameTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        addPasswordBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Password");

        sourceTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Account: ");

        jLabel2.setText("Username: ");

        jLabel3.setText("Password:");

        jLabel4.setText("Email: ");

        addPasswordBtn.setText("Add Password");
        addPasswordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPasswordBtnActionPerformed(evt);
            }
        });
        addPasswordBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                EnterKey(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        cancelBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cancelBtnKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addPasswordBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sourceTextField)
                            .addComponent(passwordTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(emailTextField)
                            .addComponent(usernameTextField))))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sourceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(addPasswordBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelBtn)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourceTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sourceTextFieldActionPerformed
    
    //method to force user to enter 5 SAME accounts only.. this prevents displaying excess same accounts when searching (avoids output window of search to be immensely large)
    //upon clicking "ADD" a search is performed in the password's file.. if there exists 5 entries w/ same accounts, user is blocked from entering another... otherwise procees to add
    private int searchFile(String givenAccnt)
    {
        givenAccnt = sourceTextField.getText();                                 //user's "account" input 
        String accntToken;                                                      //first string token of a line, i.e. "account"
        String getLine;                                                         //this is the line that contains the password the user is looking for. There may be +1 lines thus I have to return them all.*** must use ArrayList of strings (lines of strings) instead of Array
        int i;                                                                  //delineator... finds index of 1st space " " on that line  (or try ' '), so we can get to the 1st token of a line i.e. "account"
        int v = 0;    
        try
        {
            Scanner scan = new Scanner(targetFile);                             //scanner for target file
            while(scan.hasNextLine())                                           //while lines are being scanned ----- until end of line
            {
                getLine = scan.nextLine();                                      //gets a line
                i = getLine.indexOf(" ");                                       //get index of substring (account) token
                accntToken = getLine.substring(0, i);                           //gets the account (1st string token in the line, after " ")                        
                if(givenAccnt.equalsIgnoreCase(accntToken))                     //if given input account equals the account on the line 
                {     
                    v++;                                                        //increment counter for each repeat account
                }
            }
        }catch(FileNotFoundException ex) 
        {
            Logger.getLogger(PassLock_Main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error processing file!", "ERROR!" ,JOptionPane.ERROR_MESSAGE);
        }
        
        return v;                                                               //return total number of repeat accounts
    } 
    
    private void addPasswordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPasswordBtnActionPerformed
        userInfo[0] = sourceTextField.getText();
        userInfo[1] = usernameTextField.getText();
        userInfo[2] = passwordTextField.getText();    
        userInfo[3] = emailTextField.getText();
        if(userInfo[0].equals(""))
        {
            JOptionPane.showMessageDialog(null, "An ACCOUNT is required. Enter the account associated with the password you wish to save.", "Missing \"ACCOUNT\" information!", HEIGHT);
            sourceTextField.requestFocusInWindow();
        }
        else if(userInfo[1].equals(""))
        {
            JOptionPane.showMessageDialog(null, "An USERNAME is required. Enter the username associated with the password you wish to save.", "Missing \"USERNAME\" information!", HEIGHT);
            usernameTextField.requestFocusInWindow();
        }
        else if(userInfo[2].equals(""))
        {
            JOptionPane.showMessageDialog(null, "A PASSWORD is required. Enter the password you wish to save.", "Missing \"PASSWORD\" information!" ,HEIGHT);
            passwordTextField.requestFocusInWindow();
        }
        else if(userInfo[3].equals(""))
        {
             JOptionPane.showMessageDialog(null, "An EMAIL is required. Enter the email associated to account's password.", "Missing \"EMAIL\" information!", HEIGHT);
             emailTextField.requestFocusInWindow();
        }
        else 
        {
            try{
                //FileWriter fw = new FileWriter(new File("C:\\Users\\Nuno\\Documents\\my_passwords.txt"), true);             //this automatically creates my_passwords.txt file. A mod to this is allowing the user to choose where to create the file
                FileWriter fw = new FileWriter(targetFile, true);
                if(searchFile(userInfo[0]) >= 5)                                //upon adding new password, the file is searched (note: the file must exist before it is search).. if more than 5 same accounts are already in file, block
                {
                    JOptionPane.showMessageDialog(null, "A maximum of 5 passwords per account can be added." + "\n" + "There are already 5 password entries for \"" + userInfo[0] + "\" on file.", "Password Entries Exceeded!" ,JOptionPane.ERROR_MESSAGE, ErrorIcon);
                    dispose();
                }else
                { 
                    try (Writer output = new BufferedWriter(fw)) 
                    {
                        for (String userInfo1 : userInfo)                       //output all 4 strings from the array to the file my_passwords.txt
                        {
                            output.write(userInfo1 + " ");
                        }
                        output.write(System.getProperty("line.separator"));
                        JOptionPane.showMessageDialog(null, "DONE!" + "\n" + "\n"+ "Click \"GET FILE\" to retrieve your passwords!", "Password Added!",  JOptionPane.INFORMATION_MESSAGE, checkMarkIcon);
                        dispose();
                    }   
                }
            }catch (IOException e)
            {
              JOptionPane.showMessageDialog(null, "Error! No File Found.");
            }   
        }
    }//GEN-LAST:event_addPasswordBtnActionPerformed

    
    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    //add new password when ENTER key is pressed on "Add New Password" button (alternate to clicking the button)
    private void EnterKey(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EnterKey
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            userInfo[0] = sourceTextField.getText();
            userInfo[1] = usernameTextField.getText();
            userInfo[2] = passwordTextField.getText();    
            userInfo[3] = emailTextField.getText();
        if(userInfo[0].equals(""))
        {
            JOptionPane.showMessageDialog(null, "An ACCOUNT is required. Enter the account associated with the password you wish to save.", "Missing \"ACCOUNT\" information!", HEIGHT);
            sourceTextField.requestFocusInWindow();
        }
        else if(userInfo[1].equals(""))
        {
            JOptionPane.showMessageDialog(null, "An USERNAME is required. Enter the username associated with the password you wish to save.", "Missing \"USERNAME\" information!", HEIGHT);
            usernameTextField.requestFocusInWindow();
        }
        else if(userInfo[2].equals(""))
        {
            JOptionPane.showMessageDialog(null, "A PASSWORD is required. Enter the password you wish to save.", "Missing \"PASSWORD\" information!" ,HEIGHT);
            passwordTextField.requestFocusInWindow();
        }
        else if(userInfo[3].equals(""))
        {
             JOptionPane.showMessageDialog(null, "An EMAIL is required. Enter the email associated to account's password.", "Missing \"EMAIL\" information!", HEIGHT);
             emailTextField.requestFocusInWindow();
        }
        else 
        {
            try{
                FileWriter fw = new FileWriter(targetFile, true);             //this automatically creates my_passwords.txt file. A mod to this is allowing the user to choose where to create the file
                
                if(searchFile(userInfo[0]) >= 5)            //upon adding new password, the file is searched (note: the file must exist before it is search).. if more than 5 same accounts are already in file, block
                {
                    JOptionPane.showMessageDialog(null, "A maximum of 5 passwords per account can be added." + "\n" + "There are already 5 password entries for \"" + userInfo[0] + "\" on file.", "Password Entries Exceeded!" ,JOptionPane.ERROR_MESSAGE, ErrorIcon);
                    dispose();
                }else
                { 
                    try (Writer output = new BufferedWriter(fw)) 
                    {
                        for (String userInfo1 : userInfo)                       //output all 4 strings from the array to the file my_passwords.txt
                        {
                            output.write(userInfo1 + " ");
                        }
                        output.write(System.getProperty("line.separator"));
                        JOptionPane.showMessageDialog(null, "DONE!" + "\n" + "\n"+ "Click \"GET PASSWORDS\" to retrieve your passwords!", "Password Added!",  JOptionPane.INFORMATION_MESSAGE, checkMarkIcon);
                        dispose();
                    }   
                }
            }catch (IOException e)
            {
              JOptionPane.showMessageDialog(null, "Error! No File Found.");
            }   
        }
        }
    }//GEN-LAST:event_EnterKey

    //cancel when CANCEL button is focused and enterkey 
    private void cancelBtnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelBtnKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            dispose();
        }
    }//GEN-LAST:event_cancelBtnKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ADD_dialogBox_v1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ADD_dialogBox_v1 dialog = new ADD_dialogBox_v1(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private final ImageIcon ErrorIcon = new ImageIcon(getClass().getResource("/red_cross50x50.png"));
    private final ImageIcon checkMarkIcon = new ImageIcon(getClass().getResource("/checkedPL.png"));
    private final String[] userInfo = new String[4];
    
    String path = System.getProperty("user.home") + File.separator + "Documents\\my_passwords.txt";
    private final File targetFile = new File(path);
    //private final File targetFile = new File("C:\\Users\\Nuno\\Documents\\my_passwords.txt");
    //private final File targetFile = new File(System.getProperty("user.home"+"\\Documents\\my_passwords.txt"));
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPasswordBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField passwordTextField;
    private javax.swing.JTextField sourceTextField;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

}
