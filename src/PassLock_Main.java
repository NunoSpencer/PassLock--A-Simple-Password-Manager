/*
 * PASSLOCK (version 1.0) - A Simple Password Manager APP 
 *
 * @author Nuno Spencer
 *
 * www.nunospencer.com
 * www.nunospencer.com/passlockv1
 */

import com.sun.glass.events.KeyEvent;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class PassLock_Main extends javax.swing.JFrame {
     
    public static FindPasswrdsOutputDialog foundPasswrdsOutputDialog;           //object of child dialog, used to create and display window with found passwords
    
    //creates and displays the main frame
    public PassLock_Main() {  
        initComponents();
        setIcon();
    }
    
   
    /**
     * method initComponents()
     * 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        findBtn = new javax.swing.JButton();
        searchJtextField = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        getFileBtn = new javax.swing.JButton();
        randomizeBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Passlock v1.0");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("PasswordBrain_v1_MainWindow"); // NOI18N

        findBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/magGlasssearch.png"))); // NOI18N
        findBtn.setToolTipText("Find password");
        findBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findBtnActionPerformed(evt);
            }
        });

        searchJtextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchJtextField.setToolTipText("Enter ACCOUNT associated with the password you wish to find, E.G. \"Facebook\" ");
        searchJtextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchJtextFieldKeyPressed(evt);
            }
        });

        addBtn.setText("ADD NEW");
        addBtn.setToolTipText("Add new password");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        getFileBtn.setText("GET FILE");
        getFileBtn.setToolTipText("Get your passwords");
        getFileBtn.setPreferredSize(new java.awt.Dimension(77, 23));
        getFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getFileBtnActionPerformed(evt);
            }
        });

        randomizeBtn.setText("RANDOMIZE");
        randomizeBtn.setToolTipText("Gives a random password for you to use");
        randomizeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeBtnActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pl_icon.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchJtextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(randomizeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(getFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchJtextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(getFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(randomizeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        if(searchJtextField.getText().equals(""))
        {
            findBtn.setEnabled(false);
        }else
        {
            findBtn.setEnabled(true);
        }
        searchJtextField.getDocument().addDocumentListener(new DocumentListener()
            {
                public void changedUpdate(DocumentEvent e)
                {
                    enableButton();
                }
                public void removeUpdate(DocumentEvent e)
                {
                    enableButton();
                }
                public void insertUpdate(DocumentEvent e)
                {
                    enableButton();
                }

                public void enableButton()
                {
                    if (searchJtextField.getText().equals(""))
                    {
                        findBtn.setEnabled(false);
                    }
                    else
                    {
                        findBtn.setEnabled(true);
                    }
                }
            });

            pack();
            setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents

    //GET FILE button, gets file (if exists). If file does not exist, message will show directing user to add new password thus creating the file
    private void getFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getFileBtnActionPerformed
        if(evt.getSource() == getFileBtn)
        {
            if(!(file.exists()))    
                JOptionPane.showMessageDialog(null, "Click \"ADD NEW\" to add a password.", "No File Found!", JOptionPane.INFORMATION_MESSAGE, ExclamationIcon);
            else 
            {
                JFileChooser getFile = new JFileChooser();
                int x = getFile.showOpenDialog(null);   
                if (x != JFileChooser.APPROVE_OPTION) {
                } else {
                    file = getFile.getSelectedFile();
                }
                try{
                    Desktop.getDesktop().open(file);   
                }catch(IOException e){
                    JOptionPane.showMessageDialog(null, "Error processing file!", "ERROR!" ,JOptionPane.INFORMATION_MESSAGE, ErrorIcon);
                }
            }
        }
    }//GEN-LAST:event_getFileBtnActionPerformed

    //ADD NEW , adds new password
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        ADD_dialogBox_v1 addBtnDialog = new ADD_dialogBox_v1(this, true);
        addBtnDialog.setLocationRelativeTo(null);
        addBtnDialog.setVisible(true);
    }//GEN-LAST:event_addBtnActionPerformed
    
    //FIND button, uses algorithm to search an ArrayList of 5 strings.
    private void findBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findBtnActionPerformed
        if (evt.getSource() == findBtn) {
            if(!(file.exists()))
            {
                JOptionPane.showMessageDialog(null, "Click \"ADD NEW\" to add a password.", "No File Found!", JOptionPane.ERROR_MESSAGE, ExclamationIcon);
                searchJtextField.setText("");
            }
            else
            {
                findPasswords();
            }
        }
    }//GEN-LAST:event_findBtnActionPerformed

    //RANDOMIZE button, password randomizer
    private void randomizeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomizeBtnActionPerformed
        RANDOMIZE_dialogBox_v1 randomizeBtnDialog = new RANDOMIZE_dialogBox_v1(this, true);
        randomizeBtnDialog.setLocationRelativeTo(null);
        randomizeBtnDialog.setVisible(true);
    }//GEN-LAST:event_randomizeBtnActionPerformed

    //search at press of ENTER key on jtextfield (alternate to clicking SEARCH BUTTON)
    private void searchJtextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchJtextFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            if(!(file.exists()))
            {
                JOptionPane.showMessageDialog(null, "Click \"ADD NEW\" to add a password.", "No File Found!", JOptionPane.ERROR_MESSAGE, ExclamationIcon);
                searchJtextField.setText("");
            }
            else
            {
                findPasswords();
            }
        }
    }//GEN-LAST:event_searchJtextFieldKeyPressed
      
    //method to find passwords.. given an user input, it uses simple algorithm to search matches. Each match (if exists) is collected in ArrayList, then displayed in window pane
    private void findPasswords()
    {
        String givenAccnt = searchJtextField.getText();                         //user's "account" input 
        String accntToken;                                                      //first string token of a line, i.e. "account"
        String getLine;                                                         //this is the line that contains the password the user is looking for. There may be +1 lines thus I have to return them all.*** must use ArrayList of strings (lines of strings) instead of Array
        ArrayList<String> collectedLines = new ArrayList<>();                   //any matched line(s) is collected to an ArrayList of strings (lines)
        boolean isFound = false;
        int i;                                                                  //delineator... finds index of 1st space " " on that line, then we can get to the 1st token of a line i.e. "account"
        int v = 0;                                                              //counter... everytime an input is matched to a line, the line is collected to ArrayList... increas    e v... the pane will also display number of accounts found (i.e. v)
        
        try
        {
            Scanner scan = new Scanner(file);                                   //scanner input
            while(scan.hasNextLine())                                           //while lines are being scanned ----- until end of line
            {
                getLine = scan.nextLine();                                      //gets a line
                i = getLine.indexOf(" ");                                       //get index of substring (account) token
                accntToken = getLine.substring(0, i);                           //gets the account (1st string token in the line, after " ")                        
                if(givenAccnt.equalsIgnoreCase(accntToken))                     //if given input account equals the token account on the line 
                {     
                    collectedLines.add(getLine);                                //append the line to the ArrayList collectedLines
                    isFound = true;                                             //flag as found
                    v++;                                                        //increase counter for number of matches found
                }               
            }           
            
            if(isFound)                                                             //if passwords found, display them in my custom window
            {
                foundPasswrdsOutputDialog = new FindPasswrdsOutputDialog(this, true);
                foundPasswrdsOutputDialog.foundPasswrdsLabelMssge.setText(v + " password(s) found for \"" + givenAccnt + "\" :");
                
                ListIterator<String> outputMatches = collectedLines.listIterator(); //iterator for ArrayList - iterates the ArrayList to get collected lines. NOTE: must be declared AFTER modifying the collection (i.e. adding to it), otherwise will throw ConcurrentModification exception!!
   
                while(outputMatches.hasNext())                                      //loop iterates the ArrayList to write collectedLines to the dialog
                {
                   nextOutput = (String)outputMatches.next();                       //get line(s) from the ArrayList 
                   foundPasswrdsOutputDialog.OutputTextArea.append(nextOutput + "\n"); //this statement has to be inside loop, otherwise only last match will be showed.. also
                }
                
                foundPasswrdsOutputDialog.setVisible(true);                     //make dialog visible
                outputMatches.remove();
                searchJtextField.setText("");                                   //clear searchTextField if user wants to perform another search                                     
            }else
            {
                JOptionPane.showMessageDialog(null, "No passwords found for \"" + givenAccnt + "\" account.", "Password(s) not found!", JOptionPane.INFORMATION_MESSAGE, ExclamationIcon);
                searchJtextField.setText("");
            }
        }catch(FileNotFoundException ex) 
        {
            Logger.getLogger(PassLock_Main.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error processing file!", "ERROR!" ,JOptionPane.INFORMATION_MESSAGE, ErrorIcon);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PassLock_Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PassLock_Main().setVisible(true);
            }
        });
    }
            
    public String nextOutput;                                                   //line(s) that iterator for ArrayList collects from it
    //private File file = new File("C:\\Users\\Nuno\\Documents\\my_passwords.txt");   // THIS WILL BE CHANGED TO default user "Documents" directory
    String path = System.getProperty("user.home") + File.separator + "Documents\\my_passwords.txt";
    private File file = new File(path);
    private final ImageIcon ExclamationIcon = new ImageIcon(getClass().getResource("/exclamationIcon_50x50.png"));
    private final ImageIcon ErrorIcon = new ImageIcon(getClass().getResource("/red_cross50x50.png"));
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton findBtn;
    private javax.swing.JButton getFileBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton randomizeBtn;
    private javax.swing.JTextField searchJtextField;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("PL-icon16x16.png")));
    }
}
